generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model chat {
  chatId            String      @id @unique @map("chat_id")
  geminiSentiment   String?     @map("gemini_sentiment")
  createdAt         DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?   @map("updated_at") @db.Timestamp(6)
  geminiExplanation String?     @map("gemini_explanation")
  gig_offer         gig_offer[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model chatMessage {
  id            Int    @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  senderId      Int    @map("sender_id")
  receiverId    Int    @map("receiver_id")
  message       String?
  sentTimestamp DateTime? @map("sent_timestamp") @db.Timestamptz(6)
  chatId        String?   @map("chat_id")

  @@map("chat_message")
}

model gig {
  gigId                Int    @id @default(autoincrement()) @map("gig_id")
  clientId             Int    @map("client_id")
  freelancerId         Int?   @map("freelancer_id")
  description          String    @map("description")
  gigValue             Float     @map("gig_budget")
  startDate            DateTime? @map("start_date") @db.Timestamp(6)
  endDate              DateTime? @map("end_date") @db.Timestamp(6)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  completionStatus     String?   @map("completion_status")
  expectedDeliveryDate DateTime? @map("expected_delivery_date") @db.Timestamptz(6)
  category             Int?   @map("category")
  title                String?
  updated_at           DateTime? @db.Timestamptz(6)
  gig_task             gigTask[]
}

model user {
  address       String    @unique @db.VarChar
  username      String?
  role          String?
  xFollowers    Int?   @map("x_followers")
  githubCommits Int?   @map("github_commits")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  userId        Int    @id @default(autoincrement()) @map("user_id")
  lastLogin     DateTime? @map("last_login") @db.Timestamp(6)
  email         String?   @unique
  description   String?
  updated_at    DateTime? @db.Timestamptz(6)
  profile_image String?
}

model gigTask {
  taskId      Int    @id @default(autoincrement()) @map("task_id")
  gigId       Int?   @map("gig_id")
  description String?
  status      String?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  gig         gig?      @relation(fields: [gigId], references: [gigId], onDelete: Restrict, onUpdate: NoAction)

  @@map("gig_task")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model dispute {
  dispute_id  Int    @id @default(autoincrement())
  gig_id      Int?
  plaintiff   Int?
  defendant   Int?
  arbitrator  Int?
  category    String?   @db.VarChar
  status      String?   @db.VarChar
  title       String?
  description String?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model dispute_evidence {
  id           Int    @id @default(autoincrement())
  dispute_id   Int?
  url          Int?
  submitted_by Int?
  created_at   DateTime? @db.Timestamptz(6)
  updated_at   DateTime? @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model dispute_verdict {
  verdict_id             Int    @id @default(autoincrement())
  dispute_id             Int?
  extended_delivery_days Int?
  freelancer_split       Int?
  client_split           Int?
  reasoning              String?
  status                 String?   @db.VarChar
  created_at             DateTime? @db.Timestamptz(6)
  updated_at             DateTime? @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model GigFile {
  id         Int    @id(map: "gig_files_pkey") @default(autoincrement())
  gigId      Int    @map("gig_id")
  name       String?   @map("name")
  type       String?   @map("type")
  url        String?   @map("url")
  uploadedBy Int?   @map("uploaded_by")
  createdAt  DateTime? @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @map("updated_at") @db.Timestamptz(6)
  size       Int?      @map("size")

  @@map("gig_file")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model gig_offer {
  offer_id      Int    @id @default(autoincrement())
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  gig_id        Int?
  status        String?
  comment       String?
  freelancer_id Int?
  chat_id       String?
  updated_at    DateTime? @db.Timestamptz(6)
  chat          chat?     @relation(fields: [chat_id], references: [chatId], onDelete: NoAction, onUpdate: NoAction)
}
